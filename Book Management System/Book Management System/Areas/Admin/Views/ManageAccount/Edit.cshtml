@model Book_Management_System.Models.User

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<style>
    .avatar-wrapper {
        position: relative;
        height: 200px;
        width: 200px;
        margin: 20px auto 50px;
        border-radius: 50%;
        overflow: hidden;
        box-shadow: 1px 1px 15px -5px black;
        transition: all .3s ease;
    }

        .avatar-wrapper:hover {
            transform: scale(1.05);
            cursor: pointer;
        }

            .avatar-wrapper:hover .profile-pic {
                opacity: .5;
            }

    .profile-pic {
        height: 100%;
        width: 100%;
        transition: all .3s ease;
    }

        .profile-pic:after {
            font-family: FontAwesome;
            content: "\f007";
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            position: absolute;
            font-size: 200px;
            background: #ecf0f1;
            color: #34495e;
            text-align: center;
        }

    .upload-button {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
    }

    .fa-arrow-circle-up {
        position: absolute;
        font-size: 234px;
        top: -14px;
        left: 0;
        right: 0;
        bottom: 0;
        text-align: center;
        opacity: 0;
        transition: all .3s ease;
        color: #34495e;
    }

        .fa-arrow-circle-up:hover {
            opacity: .9;
        }
</style>
<div id="page-wrapper">
    <div class="row">
        <div class="col-lg-12">
            <h1 class="page-header">Edit profile</h1>
        </div>

    </div>
    <!-- /.row -->
    <div class="row">
        <!--- col-3-->

        <div class="col-lg-6 col-lg-offset-3">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <b>Information</b>
                </div>
                <div class="panel-body">
                    <!-- Nav tabs -->
                    <ul class="nav nav-pills">
                        <!-- Info tab-->
                        <li class="active">
                            <a href="#home-pills" data-toggle="tab">User Information</a>
                        </li>
                        <!-- Change password tab-->
                        <li>
                            <a href="#profile-pills" data-toggle="tab">Change Password</a>
                        </li>
                    </ul>
                    <!-- Tab content -->
                    <div class="tab-content">
                        <!-- Tab change info-->
                        <div class="tab-pane fade in active" id="home-pills">
                            <div class="row" style="margin-top: 30px">
                                <div class="col-lg-10 col-lg-offset-1">
                                    @using (Html.BeginForm("Edit", "ManageAccount", FormMethod.Post, new { @id = "edit-info", enctype = "multipart/form-data" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        <div class="form-horizontal">

                                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                            @Html.HiddenFor(model => model.Id)
                                            <!-- Upload avatar-->
                                            <div class="avatar-wrapper">
                                                <img class="profile-pic" src="@Model.Avatar">
                                                <div class="upload-button">
                                                    <i class="fa fa-arrow-circle-up" aria-hidden="true"></i>
                                                </div>
                                              
                                                @Html.EditorFor(model => model.Avatar, new { htmlAttributes = new { @class = "form-control file-upload", @type = "file", @accept = "image/*" } })
                                                @Html.ValidationMessageFor(model => model.Avatar, "", new { @class = "text-danger" })
                                            </div>

                                            <!-- Input first name & last name-->
                                            <div class="form-group">

                                                <label class="control-label col-lg-2">First name: </label>
                                                <div class="col-lg-3">
                                                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter first name" } })
                                                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                                </div>
                                                <label class="control-label col-lg-2">Last name: </label>
                                                <div class="col-lg-5">
                                                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter last name" } })
                                                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <!-- Select birthday and enter email-->
                                            <div class="form-group">
                                                <label class="control-label col-lg-2">Birthday: </label>
                                                <div class="col-lg-3">
                                                    @Html.EditorFor(model => model.Birthday, new { htmlAttributes = new { @class = "form-control", @id = "datepicker", @placeholder = "Click to select", @readonly = "" } })
                                                    @Html.ValidationMessageFor(model => model.Birthday, "", new { @class = "text-danger" })
                                                </div>
                                                <label class="control-label col-lg-2">Email: </label>
                                                <div class="col-lg-5">
                                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @type = "email", @placeholder = "Enter your email", @id = "txtuseremail" } })
                                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <!-- Input address-->
                                            <div class="form-group">
                                                <label class="control-label col-lg-2">Address: </label>
                                                <div class="col-lg-10">
                                                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter your address" } })
                                                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <!-- Select gender -->
                                            <div class="form-group">
                                                <label class="control-label col-lg-2">Gender: </label>
                                                <div class="col-lg-10">
                                                    <div class="radio-inline">
                                                        @Html.RadioButtonFor(model => model.Gender, true) Male
                                                    </div>
                                                    <div class="radio-inline">
                                                        @Html.RadioButtonFor(model => model.Gender, false) Female
                                                    </div>
                                                </div>
                                            </div>
                                            <!--Active-->
                                            <div class="form-group">
                                                <label class="control-label col-lg-2">Active: </label>
                                                <div class="col-lg-10">
                                                    <div class="checkbox">
                                                        @Html.EditorFor(model => model.IsActive)
                                                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Save button-->
                                            <div class="form-group">
                                                <div class="col-lg-12">
                                                    <input type="submit" value="Save" class="btn btn-success center-block" />
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <!-- Tab change password-->
                        <div class="tab-pane fade" id="profile-pills">
                            <div class="row">
                                <div class="col-lg-10 col-lg-offset-1">
                                    @{Html.RenderAction("Edit", "ChangePassword");}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class=" panel-footer"><a href="@Url.Action("Index", "ManageAccount")">Back to List</a></div>
            </div>
        </div>
    </div>
</div>
<!-- SCRIPTS -->

@section scripts
{
    <!-- DatePicker -->
    <script type="text/javascript">
        $(function () {
            $("#datepicker").datepicker({
                autoclose: true,
            }).datepicker('update', new Date());
        });
    </script>

    <!-- Upload avatar -->
      <script type="text/javascript">

        $(document).ready(function () {

            var readURL = function (input) {
                if (input.files && input.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $('.profile-pic').attr('src', e.target.result);
                    }

                    reader.readAsDataURL(input.files[0]);
                }
            }

            $(".file-upload").on('change', function () {
                readURL(this);
            });

            $(".upload-button").on('click', function () {
                $(".file-upload").click();
            });
        }
        )
    </script>
    <!-- Customize validator-->
    <script type="text/javascript">
        $(document).ready(function () {

            $('#edit-info').bootstrapValidator({
                feedbackIcons: {
                    valid: 'glyphicon glyphicon-ok',
                    invalid: 'glyphicon glyphicon-remove',
                    validating: 'glyphicon glyphicon-refresh'
                },
                fields: {
                    FirstName: {
                        validators: {
                            stringLength: {
                                min: 2,
                                message: 'First name must have at least 2 characters'
                            },
                            notEmpty: {
                                message: 'Please supply your first name'
                            }
                        }
                    },
                    LastName: {
                        validators: {
                            stringLength: {
                                min: 2,
                                message: 'Last name must have at least 2 characters'
                            },
                            notEmpty: {
                                message: 'Please supply your last name'
                            }
                        }
                    },
                    Email: {
                        validators: {
                            notEmpty: {
                                message: 'Email can not be empty'
                            },
                           remote: {
                                url: "@Url.Action("IsEmailUnique", "ManageAccount",new { id = Model.Id})",
                                // Send { username: 'its value', email: 'its value' } to the back-end
                                data: function (validator) {
                                    return {
                                        Email: validator.getFieldElements('Email').val()
                                    };
                                },
                                message: 'The email is already exist'
                            }
                        }
                    }
                }
            })

            $('#change-password').bootstrapValidator({
                feedbackIcons: {
                    valid: 'glyphicon glyphicon-ok',
                    invalid: 'glyphicon glyphicon-remove',
                    validating: 'glyphicon glyphicon-refresh'
                },
                fields: {
                    Password: {
                        stringLength: {
                            min: 6,
                            max: 30,
                            message: 'Password must have at least 6 and less than 50 characters'
                        },
                        notEmpty: {
                            message: "Password can not be empty"
                        },
                        validators: {
                            regexp: {
                                regexp: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z0-9\S]{6,30}$/,
                                message: 'Password must be 6-30 characters, at least one uppercase letter, one lowercase letter, one number and no whitespace (special characters are allowed)'
                            }
                        }
                    },
                    Confirm_Password: {
                        validators: {
                            stringLength: {
                                min: 6,
                                message: 'Confirm password must have at least 6 characters'
                            },
                            notEmpty: {
                                message: "Confirm password can not be empty"
                            },
                            identical: {
                                field: 'Password',
                                message: 'Password does not match'
                            }
                        }
                    }
                }
            })
        })
    </script>
}