@model Book_Management_System.Models.Book
@using Book_Management_System.Resources.Admin.Book;
@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<div id="page-wrapper">

    <div class="row">
        <div class="col-lg-12">
            <h1 class="page-header">@Resources.EditBook</h1>
        </div>
        <!-- /.col-lg-12 -->
    </div>

    <div class="row">
        <div class="container">
            <div class="col-lg-3">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <img class="img-responsive" src="@Model.ImageURL" style="width:100%; height:90%" />
                    </div>
                </div>
            </div>
            <div class="col-lg-7">
                <div class="panel panel-default ">
                    <div class=" panel panel-heading"> <h4>@Resources.EditBook</h4></div>
                    <div class="panel panel-body">

                        @using (Html.BeginForm("", "", new { id = string.Empty }, FormMethod.Post, new { @id = "form", enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(model => model.CreateDate)
                            @Html.HiddenFor(model => model.ModifiedDate)
                            <div class="form-horizontal">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.Id)

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @placeholder = Resources.TitlePlace, data_empty = Resources.TitleErrorEmpty, data_length = Resources.TitleErrorLength, id = "title" } })
                                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Summary, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.Summary, new { htmlAttributes = new { @class = "form-control", @placeholder = Resources.SummaryPlace, data_empty = Resources.SummaryErrorEmpty, data_length = Resources.SummaryErrorLength, id = "summary" } })
                                        @Html.ValidationMessageFor(model => model.Summary, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ImageURL, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.ImageURL, new { htmlAttributes = new { @class = "form-control", type = "file" ,data_empty = Resources.ImageErrorEmpty, data_regexp = Resources.ImageErrorRegexp, id = "image" } })
                                        @Html.ValidationMessageFor(model => model.ImageURL, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ISBN, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.ISBN, new { htmlAttributes = new { @class = "form-control", @placeholder = Resources.ISBNPlace, data_empty = Resources.ISBNErrorEmpty, data_length = Resources.ISBNErrorLength, data_regexp = Resources.ISBNErrorRegexp, id = "isbn" } })
                                        @Html.ValidationMessageFor(model => model.ISBN, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", @placeholder = Resources.PricePlace, data_empty = Resources.PriceErrorEmpty, data_regexp = Resources.PriceErrorRegexp, id = "price" } })
                                        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @placeholder = Resources.QuantityPlace, data_empty = Resources.QuantityErrorEmpty, data_regexp = Resources.QuantityErrorRegexp, id = "quantity" } })
                                        @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.IdAuthor, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-8">
                                        @Html.DropDownList("IdAuthor", null, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.IdAuthor, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.IdPublisher, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-8">
                                        @Html.DropDownList("IdPublisher", null, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.IdPublisher, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.IdCategory, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-8">
                                        @Html.DropDownList("IdCategory", null, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.IdCategory, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-8">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.IsActive)
                                            @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-offset-3 col-md-9">
                                        <input type="submit" value=@Book_Management_System.Resources.Admin.Layout.Resources.Save class="btn btn-success" />
                                    </div>
                                </div>
                            </div>
                        }

                        <div>
                            @Html.ActionLink(Book_Management_System.Resources.Admin.Layout.Resources.BacktoList, "Index")
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts{
    <script>
        /*DataTable*/
        $(document).ready(function () {
            $('#table1').DataTable({

            });
        });

        /*-------Boostrap validator--------*/
        $(document).ready(function () {
            $("#form").bootstrapValidator({
                feedbackIcons: {
                    valid: 'glyphicon glyphicon-ok',
                    invalid: 'glyphicon glyphicon-remove',
                    validating: 'glyphicon glyphicon-refresh'

                },
                fields: {
                    /*Books*/
                    Title: {
                        message: 'The Title is not valid !',
                        validators: {
                            notEmpty: {
                                message: $('#title').attr('data-empty')
                            },
                            stringLength: {
                                min: 6,
                                message: $('#title').attr('data-length')
                            },
                        }
                    },
                    Summary: {
                        message: 'The summary is not valid !',
                        validators: {
                            notEmpty: {
                                message: $('#summary').attr('data-empty')
                            },
                            stringLength: {
                                min: 6,
                                message: $('#summary').attr('data-length')
                            },
                        }
                    },
                    ISBN: {
                        message: 'The ISBN is not valid !',
                        validators: {
                            notEmpty: {
                                message: $('#isbn').attr('data-empty')
                            },
                            stringLength: {
                                min: 6,
                                max: 30,
                                message: $('#isbn').attr('data-length')
                            },
                            regexp: {
                                regexp: /^[\d`~!@@#$%^&*()\-_=+{}|<,>?:;"']+$/,
                                message: $('#isbn').attr('data-regexp')

                            }
                        }
                    },
                    Price: {
                        message: 'The price is not valid !',
                        validators: {
                            notEmpty: {
                                message: $('#price').attr('data-empty')
                            },
                            regexp: {
                                regexp: /^[0-9]+$/,
                                message: $('#price').attr('data-regexp')
                            }
                        }
                    },
                    Quantity: {
                        message: 'The quantity is not valid !',
                        validators: {
                            notEmpty: {
                                message: $('#quantity').attr('data-empty')
                            },
                            regexp: {
                                regexp: /^[0-9]+$/,
                                message: $('#quantity').attr('data-regexp')
                            }
                        }
                    }
                }
            });
         
        });

                                /*---------End----------*/

    </script>
}
